version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: assetory/$SERVICE_NAME
    docker:
      - image: circleci/node:12

jobs:

  test:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      
      # Install dependencies
      - run:
          name: "install dependencies"
          command: "npm install"

      # Run tests
      - run:
          name: "run tests"
          command: "npm test"
          
  build-develop:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      
      # Install dependencies
      - run:
          name: "install dependencies"
          command: "npm install"

      # build application
      - run:
          name: "build application"
          command: "npm run build"
      
      # Build Docker image
      - run:
          name: Build Docker image
          command: |
            docker build \
            --build-arg SERVICE_NAME_ARG=$SERVICE_NAME \
            --build-arg HEALTHCHECK_ID_ARG=$HEALTHCHECK_DEVELOP \
            -t $IMAGE_NAME:develop . 
      
      # Archive Docker image
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
            
  build-latest:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      
      # Install dependencies
      - run:
          name: "install dependencies"
          command: "npm install"
      
      # Build Docker image
      - run:
          name: Build Docker image
          command: |
            docker build \
            --build-arg SERVICE_NAME_ARG=$SERVICE_NAME \
            -t $IMAGE_NAME:latest . 
      
      # Archive Docker image
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

workflows:
  version: 2
  workflow:
    jobs:
      # Run Tests
      - test:
          filters:
            branches:
              only:
                - develop
      # Build develop Image
      - build-develop:
          requires:
            - test
          filters:
            branches:
              only:
                - develop

      # Build latest image
      - build-latest:
          filters:
            branches:
              only:
                - master
